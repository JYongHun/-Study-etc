Object Oriented Programming

	부품 Object를 먼저 만들고 이것들을 하나씩 조립해서 완성된 Program을 만드는 기법
	
	Object ?
		자신의 속성과 동작을 가지는 모든 것
		Object는 Field(속성) 과 Method(동작)로 구성된 Java Object로 모델링할 수 있다.
	
	Object의 상호 작용
	Objec들은 서로 간에 Method를 호출하고 결과를 받는다.
	
	Object Oriented Programming 특징 (캡슐화, 상속 , 다형성)
		캡슐화
		- Object의 Field, Method를 하나로 묶고, 싱제 구현 내용을 외부에 감추는 것을 말한다.
		- 외부Object는 Object내부의 구조를 알지 못하며 Object가 노출해서 제공하는 Field와 Method만
		   이용할 수 있다.
		- Access Modifier를 사용해서 노출을 결정한다.
		
		Inheritance(상속)
		- 상위 Object의 Field와Method를 하위 Object에게 물려주는 행위
		- Inheritance의 효과
			상위Object를 재사용해서 하위 객체를 빨리 개발할수있다.
			반복된 코드의 중복을 줄여준다.
			유지 보수의 편리성을 제공해 준다.
			객체의 다형성을 구현할수 있다.
	
		Polymorphism(다형성)
		-같은 타입이지만 실행 결과가 다양한 객체를 대입할 수 있는 성질을 말한다.
			효과
			Object를 부품화시킬 수 있다.
			유지보수가 용이하다.

Object 와 Class

	Object 와 Class
	- Class 에는 Object를 생성하기 위한 Field와 Method가 정의되어 있다.
	- Class 로부터 만들어진 Object를 해당 Class의 instance라고 한다.
	- 하나의 Class로부터 여러 개의 instance를 만들 수 있다.

Class의 선언

	Class의 이름
		규칙
		첫 번쨰 글자는 숫자가 올 수 없다.
		$ _ 외의 특수 문자는 사용할 수 없다.
		JavaKeyword 는 사용할 수 없다.
		대소문자는 서로 다른 문자로 인식한다.
		첫자와 연결된 다른 단어의 첫자는 대문자로 작성하는 것이 관례이다.

Object 생성과 Class variable
	
	new Operator
	- Object를 생성하는 역활을 한다.
	  생성된 Object는 heap memory영역에 생성된다.
	
	Class variable
	new Operator 에 의해 return된 Object의 번지를 저장하는 variable(reference type variable)다.
	heap 영역의 Object를 사용하기 위해 사용된다.

	Class 의 용도
	Library(API : Application Program Interface)용
	- 자체적으로 실행되지 않으나, 다른 Class에서 이용할 목적으로 만든 Class
	실행용
	- main() Method를 가지고 있는 Class로 실행할 목적으로 만든 Class
	1개의 Application = 1개의 실행 Class + n개의 Library Class

Class의 구성 멤버
	Field (memberVariable)
	- Object의 data가 저장되는 곳
	Constructor
	- Object 생성시 초기화 역활을 담당
	Method
	- Object의 동작에 해당하는 실행 블록

Field
	Field의 내용
	- Object 의 고유 데이터 , Object가 가져야할 부품Object, Object의 현재 상태 data
	
	Fielc의 기본 초기값
	- primitive	type : Integer 0 , 실수타입 0.0, boolean false
	- reference type : null

	Field사용
	- Field값을 읽고, 변경하는 작업을 말한다
	- Object내부 : "FieldName"으로 바로접근, Object외부 : "variable.FieldName" 으로 접근

Constructor
	Constructor
	- new Operator에 의해 호출되어 Object의 초기화를 담당한다.

	Deault Constructor
	- 모든 Class는 Constructor가 반드시 존재하며 하나 이상을 가질 수 있다.
	- Constructor 선언을 생략하면 컴파일러는 다음과 같은 기본 Constructor를 추가시킨다.
	
	Constructor 선언
	- default Constructor 대신 개발자가 직접 선언
	  EX)  Class (parameter) {  //Object초기화 코드   }
	- 개발자가 선언한 생성자가 있을 경우, 컴파일러는 기본 생성자를 추가하지 않는다.
	
	Field 초기화
	- 초기값 없이 선언된 Field는 Object가 생성될 떄 기본값으로 자동 설정된다.
	- 다른 값으로 Field를 초기화하는 방법
		Field를 선언할 떄 초기값을 설정, 생성자의 parameter로 초기값을 설정
	- Constructor의 parameter와 Field명이 동일할 경우
		- 관례적으로 parameter 값을 Field값으로 설정할 경우 parameter와 Field명을 동일하게 준다.
		- Constructor 내부에서는 parameter가 우선순위를 갖는다.
		- Field임을 명시하기 위해 this.fieldName을 사용한다.
		 	this.		
			-this 는 Object 자신의 reference로서 자신의 번지를 가지고 있다.
			- 우리가 우리 자신을 "나"라고 하듯이 Object가 Object자신을 this라고 한다.

	Constructor를 다양화해야 하는 이유
	- Object를 생성할 떄 외부의 값으로 Object를 초기화 할 필요가 있다.
	- 외부의 값이 어떤 type으로 몇 개가 제공될 지 모르기 떄문에 Constructor도 다양화해질 필요가 있다.

	Constructor Overloading
	- parameter type, 개수 , 순서가 다른 constructor를 여러 개 선언하는 것을 말한다.

	다른 Constructor 호출( this() )
	- Constructor Overloading 되면 Constructor간의 중복된 code가 발생할 수 있다.
	- 초기화 내용이 비슷한 Constructor들에서 이러한 현상을 많이 볼 수 있다.
	- 초기화 내용을 한 Constructor에 몰아서 작성한다.
	- 다른 Constructor는 초기화 내용을 작성한 Constructor를 this()로 호출한다.
	- 호출할떄 parameter가 없는 값은 this(  )안에  default값으로 대체해서 입력한다.

Method

	Method란 
	- Object의 동작을 말하며 호출해서 실행할 수 있는 중괄호 {} 블록을 말한다.
	- Method를 호출하면 중괄호 {} 블록에 있는 모든 code들이 일괄적으로 실행된다.
	
	Method 선언 (Method Signature)
	Ex) returntype MethodName (parameter) { 실행 code  }
	- return type
		Method가 실행 후 return하는 값의type
		Method는 return값이 있을 수도 있고 없을 수도 있다.  (void)
	- Method명은 관례적으로 소문자로작성한다 단 단어가 혼합되면 뒤이어오는 단어의 첫 글자는 대문자로 한다.

	parameter 선언
	- parameter는 Method가 실행할 떄 필요한 data를 외부로부터 받기 위해 사용한다.
	- parameter의 선언은 옵션이다.
	- parameter의 수를 모를 경우 	array or int ... values

	return 문
	- Method의 실행을 중지하고 return값을 지정하는 역활을 한다.
	- return값이 있는 Method
		반드시 return문을 사용해서 return값을 지정해야 한다.
		return 문 뒤에는 실행문이 올 수 없다.
	- return값이 없는 Method = void
		return문은 옵션이며, return문의 용도는 Method 실행을 단지 중지한다.

	Method 호출
	- Method는 Object(Class) 내 외부의 호출에 의해 실행된다.
		Class내부 Method이름으로 호출
		Class외부 Object생성 후 , reference variable를 이용해서 호출
	
	Object내부에서 호출
	- Method의 이름으로 호출하되, parameter의 type과 수에 맞게 parameter value을 제공해야한다.
	
	Object외부에서 호출
	- Class 로부터 Object를 생성하고 Class variable가 reference하도록 한다.
	- reference variable와 함께 도트(.) Operator를 이용해서 Method를 호출한다.
	
	Method Overloading
	- Class내에 같은 이름의 Method를 여러 개 선언하는 것을 말한다.
	- 하나의 Method 이름으로 다양한 parameter를 박기 위해 MethodOverloading한다.
	- Overloading의 조건parameter type,개수 , 순서가 달라야한다.

instance member와 this
	
	instance member란
	- Object(instance)마다 가지고 있는 Field와 Method를 말한다.
	- instance member는 Object에 소속된 member이기 떄문에 Object가 없이는 사용할 수 없다.
	
	this
	- Object(instance) 자신의 reference(번지)를 가지고 있는 키워드이다.
	- Object 내부에서 instance member임을 명확히 하기 위해서  this.을 붙일 수 있다.
	- 주로 parameter와 Field명이 동일할 경우 instance Field임을 명확히하기 위해 붙인다.

static member와 static
	
	static(정적) member란
	- static member란 Class에 고정된 Field와 Method를 말한다.
	- static member는 Class에 소속된 member로 Object 내부에 존재하지 않고,Method영역에 존재한다.
		static member는 Object를 생성하지 않고 Class로 바로 접근해서 사용한다.
	
	static member 선언
	- Field 또는 Method를 선언할 떄 static 키워드를 붙이면 된다.

	static member 사용
	- Class 이름과 함께 도트(.)Operator로 접근할 수 있다.
	
	instance member VS static member 선언의 기준
	- Field
		Object마다 가지고 있어야할 데이터 ->instance Field
		공용적인 data -> static Field 이 memory 절약함.
	- Method
		instance Field로 작업해야할 Method -> instance Method
		instance Field로 작업하지 않는 Method -> static Method
	tip) this와 static은 같이 사용못함
	
	static 초기화 block
	- Class 가 Method 영역으로 loading될 때 자졷으로 실행하는 block이다.
	  Ex)  static{   .....    }
	- static Field의 복잡한 초기화 작업과 static Method를 호출할 수 있다.
	- Class 내부에 여러 개가 선언되어도 상관없다. 선언된 순서대로 실행된다.

	static Method 와 static block작성시 주의 할점
	- Object없어도 실행할 수 있기 떄문에
	- 이들 block 내부에 instance Field나 instance Method를 사용할 수 없다.
	- Object 자신의 참조인 this를 사용할 수 없다.
	
	main() Method도 static Method다.

	Singleton
	- 하나의 Application 내에서 단 하나만 생성되는 Object를 말한다.

	Singleton을 만드는 방법
	- 외부에서 newOperator로 Constructor를 호출할 수 없도록 막는다.
		private Access Modifier를 Constructor 앞에 붙인다.
	- Class 자신의 type으로 staticField를 선언하고, 자신의 Object를 생성해 초기화한다.
		private Access Modifier를 붙여 외부에서 Field값을 변경할수 없도록 막는다.
	- 외부에서 호출할 수 있는 staticMethod인 getInstance()를 선언한다.
		static Field에서 참조하고 있는 자신의 Object를 return하도록 한다.

	Singleton 얻는 방법
	Ex) Class  var1 = Class.getinstance();   
	    Class  var1 = Class.getinstance();     둘다 같은 heap 의 번지수를 같고있다.

final Field 와  constant
	
	final Field
	- final Field = 최종적인 값을 갖고 있는 Field = 값을 변경할 수 없는 Field
	- final Field의 딱 한번의 초기값 지정 방법  단 두가지
		Field 선언시 ,  Constructor

	constant (static final)
	- constant = static final field
		final field : Object마다 가지는 불변의 instance Field
		constant(static final): Object마다 가지고 있지 않고. Method영역에 Class별로 관리되는 불변의 staticField
		공용 데이터로서 사용

	constant 선언과 초기화
	-constant이름
		전부 대문자로 작성하는 것이 관례
		다른 단어가 결합되면 _ 로 연결하는 것이 관례
	- 선언시 or 선언시 값을 안줄떄 Constructor 두가지(static block)

Package
	package란
	- Class를 기능별로 묶어서 그룹 이름을 붙여 놓은 것을 말한다.
		directory와 비슷한 개념이다
		package의 물리적인 형태는 파일 시스템의 폴더이다.
	- package는 Class 이름의 일부이다.
		전체 Class이름 = 상위package.하위package.Class
		Class명이 같아도 package명이 다르면 다른 Class로 취급한다.
	- Class를 선언할 떄 package가 결정된다.
		Class를 선언할 떄 package를 선언해야 한다.
		Class 파일은 (~.class) 선언된 package와 동일한 폴더안에서만 동작한다.
		Class 파일은 (~.class) 다른 폴더안에 넣으면 동작하지 않는다.
	
	package 선언
	- package 선언은 Class 선언 첫 줄에 해야 한다.
	- 상위 package와 하위package는 도트(.)로 구분한다.
	- package 이름 규칙
		전부 소문자로 작성하는 것이 관례이다.
		숫자로 시작해서는 안된다.		_ $ 를 제외한 특수문자를 사용해서는 안된다.
		회사 도메인의 역순으로  package 이름을 보통 만든다.

	package 선언이 포함된 Class 컴파일  ----- 책봐		
		javac XXXX.java
	package 선언이 포함된 Class 실행    ------ 책봐
		javac -d package가 생성될 위치 XXX.java

	import 문		단축키 CTRL + Shift + O 
	- package 내에 같이 포함된 Class간에는 Class이름으로 사용이 가능
	- package가 다른 Class를 사용해야 할 경우, 2가지 방법
		package명이 포함된 전체 Class 이름으로 사용 (경로를 적어라)
		import문으로 package 를 지정하고 사용  ----- 예시 책으로봐  
		Ex)경로. *; 경로안의 package를 모두 사용가능 

Access Modifier
	- Class 및 Class의 구성 member에 대한 접근을 제한하는 역할을 한다.
		Class제한, Constructor제한, Field와 Method 제한
	- Access Modifier 의 종류
			 적용 대상			접근할 수 없는 Class
		public  : Class,Field,Constructor,Method ,         없음
		protected  : Field,Costructor,Method ,      	자식 Class가 아닌 다른 package에 소속된 Class
		default  : Class, Field, Constructor,Method, 	다른 package에 소속된 Class
		private  : Field, Consturctor, Method  ,   	모든 외부 Class

Getter 와 Setter
	
	Class를 선언할 떄 Field는 일반적으로 private 접근 제한을 한다.
	- 읽기 전용 필드가 있을 수 있다. (getter의 필요성)
	- 외부에서 엉뚱한 값으로 변경할 수 없도록 한다. (setter의 필요성)

	Getter
	- private Field의 값을 return하는 역활을 한다.
		필요한 경우 Field의 값을 가공해서 return한다.
	- getFieldName() or isFieldName() Method를 말한다. (get 다음 대문자)
		Field type boolean일 경우 isFieldName() 이다.
	Setter
	- 외부에서 주어진 값을 Field값으로 수정한다.
		필요할 경우 외부의 값을 유효성을 검사한다.	
	- setFieldName(parameter) Mehtod를 말한다.	(set 다음 대문자)
		parameter type 은 Field의 type과 동일하다.

Annotation 		269p 이부분 수업들어가고 이해해야할듯. 지금은 이해가 잘안됨
	
	Annotation(어노테이션)이란
	- program에게 추가적인 정보를 제공해주는 metadata이다.
	- Annotation 용도
		컴파일러에게 code 작성 문법 error를 체크하도록 정보를 제공
		   Ex) Method가 재정의 되었는지 확인할 수 있다.(@override)
		software 개발 툴이 빌드나 배치시 code를 자동으로 생성할 수 있도록 정보를 제공
		실행시(런타임시) 특정 기능을 실행하도록 정보를 제공 (Ex)서블릿,컨트롤러.......)

	Annotation type 정의와 적용
	- Annotation type  정의 
		소스 파일 생성 : AnnotationName.java
		소스 파일 내용 : public @interface AnnotationName {            }
	- Annotation type 적용
		@AnnotationName   Ex) @Override
	- Annotation의 element member
		Annotation을 코드에 적용할 때 외부의 값을 입력받을 수 있도록 하는 역활
		element 선언 (element type은 primitive 와 reference type 모두 사용가능)  ---- 예시책
		Annotation 적용시 element값을 지정하는 방법, =  		         ---- 예시책
	기본 element value()          element뒤에는 ()
		Annotation을 적용할 때 element명을 생략가능
		두 개 이상의 속성을 기술할 때에는 value = 값 형태로 기술		

	Annotation 적용 대상
	- code 상에서 Annotation을 적용할 수 있는 대상
	- java.lang.annotation.ElementType 열서 constant로 정의되어 있음
		
		ElementTyep Enumeration constant | 적용대상
		TYPE,			         	Class, interface, EnumerationType
		ANNOTATION_TYPE, 		Annotation
		FIELD, 				Field
		CONSTRUCTOR, 			Constructor
		METHOD		        		Method
		LOCAL_VARIABLE			Local_variable
		PACKAGE				Package

	- Annotation적용 대상 지정 방법
		@Target Annotation 으로 적용 대상 지정
		@Target의 기본 element인 value의 type은 ElementType Array

	Annotation 유지 정책
	- Annotation 적용 code가 유지되는 시점을 지정하는 것
	- java.lang.annotation.RetentionPolicy Enumeration constant로 정의되어 있음
		SOURCE, CLASS, RUNTIME(가장많이씀)		정리 책으로...
		Reflcction : runtime에 Class의 mata정보를 얻는 기능
	- 유지 정책 지정 방법
		@Retention Annotation으로 유지 정책을 지정
		@Retention의 기본 element인 value의 type은 RetentionPolicy  --- 예시 책

	Runtime시에 Annotation 정보 사용하기
	- Class에 적용된 Annotation 정보 얻기
		Class.class의 Annotation 정보를 얻는 Method를 이용
	- Field, Constructor, Method에 적용된 Annotation 정보 얻기 
		표
		returnType      |  MethodName(parameter)       | 설명
		Field[]	          getFields()		  	   Field 정보를 Field Array로 return
		Constructor[]      getConstructors()		   Constructor 정보를 Constructor Array로 return
		Method[]	          getDeclaredMethods()	   Method정보를 Method Array로 return
	- Annotation 정보를 얻기 위한 Method
		isAnnotationPresent( ), getAnnotation( ), getAnnotations(),getDeclaredAnnotations()
		자세한 내용은 책으로




`