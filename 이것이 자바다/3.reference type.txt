Reference Type

Daya type classification (데이터 타입 분류)
	primitive type과 reference type
	reference 는Object를 참조함, primitive 는 stack영역에 직접 저장함 
	reference type은 직접 값을 갖지않고 참조하는 Object의 주소를 갖고있다 (Heap영역에 생성)
	reference type variable는 stack에 저장될떄 값을 저장하는 게 아니라 object의 memory 주소를 저장하고 
	사용할떄 heap의 메모리 주소를 찾아가서 heap의 값을 사용하는것

memory 사용 영역
	JVM은 OS에서 Runtime Data Area을 세 영역으로 구분 
	Runtime Data Area생성 

-Method 영역(Class 중요)
	JVM을 시작할 떄 생성
	로딩된 Class 바이트 코드 내용을 분석후 저장
	모든 thread가 공유

-Heap 영역
	JVM을 시작할 떄 생성
	Object/array저장(중요)
	사용되지 않은 Object는 GC가 자동제거

-JVM Stack 영역(변수들이 생성이됨 중요)
	thread 별로 생성
	Method를 호출할 때마다 Frame을 Stack에 추가(push)
	Method가 종료하면 Frame을 제거(pop)

primtive 와 reference 의  ==,!= operations
	
	primtive type  ==, !=  variable 값이 같은지 다른지 조사
	reference type 동등comparison ==, !=
	array, enumeration(열거), class, interface : 동일한object 참조하는지 다른 object를 참조하는지 조사

null 과 NullPointerException(null포인터예외)

-null
	variable을 참조하는 Object가 없을 경우 초기값으로 사용 가능
	reference type의 variable에만 저장가능
	null로 초기화된 reference variable(참조변수)는 stack 영역 생성 (null도 값이기 떄문)
	==,!= operations 이 가능

-NullPointerException
	예외(Exception)
	사용자의 잘못된 조작 또는 개발자의 잘못된 코딩으로 인해 발생하는 프로그램 오류
	NullPointerException
	reference variable가 null값을 가지고 있을 떄, Object의 Field나 Method를 사용하려고 했을 떄 발생

String type
	문자열을 저장하는 Class type, 문자열 literal이 동일할경우 String Object를 공유
	new Operator 를 이용한 String Object 생성(Heap 영역에 새로운 String Object를 생성)

Array
	같은 type의 Data를 연속된 공간에 저장하는 자료구조, 각 Data의 저장 위치는 index를 부여해서 접근
	배열을 선언할때 Array variable 를 선언해야한다  Ex) type[] variable;
	Array variable 은 reference variable 이므로 Array가 생성되기 전에 null로 초기화가 가능하다

-값 목록으로 배열 생성 {}
	Array변수 선언과 동시에 값 목록{}으로 생성하는게 아니고 선언후 할려면 var = new type[] { } 이렇게해야함

new Operator 로 Array 생성
	배열 생성시 값 목록을 가지고 있지 않고 항후 값들을 저장할 배열을 미리 생성하고 싶을 경우
	Ex) type[] var = new type[length]

Array length

commend line input (커맨드 라인 입력) 책봐

Multidimensional Array
	
	2차원 Array 는 수학의 행렬과 같은 자료 구조와 비슷함  (실제론 memory Heap에 세개의 array object를 생성함)
	Ex) type[][] var = new type[ ][ ]   앞이 행 뒤가 렬  type[][] var = { {}, {} }
	계단식 구조의 2차원 Array 가능

Object를 reference 하는 Array
	primitive type (int,double,boolean....)array 각항목에 직접 값을 가지고 있다.
	reference type (class,interface) array  각 항목에 Object의 번지를 가지고 있다.

Array 복사
	배열을 한 번 생성하면 크기를 변경할 수 없다. (중요)  이것떄문에 Array list를 쓰나봄
	더 많은 저장 공간이 필요하다면 보다 큰 Array을 새로 만들고 이전 Array로부터 항목 값들을 복사해야 한다.
-복사방법
	for문  (개무식하게 index로 호출하면서 저장하는법)
	System.arrayCopy() Method를 이용하는 방법
	- System.arraycopy(Object src, int srcPos, Object dest, int destPos, int length); 
		 	(이전 Array , 복사위치 index, 덮어쓰기할 Array, 덮어쓰기할 index, 새로운 Array length)
	Arrays Class 이용 방법

향상된 for 문
	Array 및 Collection 의 항목 요소를 순차적으로 처리, index를 이용하지 않고 바로 항목 요소를 반복
	Ex) for( 2.type var : 1.Array ){   3실행문    }

Enumeration type(열거 타입)
	한정된 값만을 갖는 Datatype
	한정된 값은 Enumeration Constant (열거 상수)로 정의

-Enumerationtype 선언
	첫 문자는 대문자로 작성(숫자 X) Class명명규칙과 동일
	소스 작성 방법 public enum EnumerationTypeName{ }
	Eunmeration Constant 이름은 관례적으로 모두 대문자로 작성 단어가 결합할때 _ 가 들어감
-Enumeration type variable
	Enumeration type variable값은 Enumeration Constant 중 하나이어야  한다
	reference type 이므로 null값을 저장가능
	Enumeration Constant 는 Enumeration Object를 참조 한다. Heap에 생성되다 
	Ex)Enumeration type . Constant

Enumeration Object Method
	Enumeration Object 는 Enumeration Constant 의 String을 내부 테이터로 가지고있다
	Enumeration type은 커뮤ㅏ일시에 java.lang.Enum Class를 자동 상속한다.
	Method 
		naem(), ordinal(), compareTo(), valueOf(String name), valuse() 
	




